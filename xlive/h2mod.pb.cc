// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2mod.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "h2mod.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* H2ModPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  H2ModPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* H2ModPacket_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* h2mod_set_grenade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_set_grenade_reflection_ = NULL;
const ::google::protobuf::Descriptor* h2mod_set_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_set_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* h2mod_map_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  h2mod_map_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_h2mod_2eproto() {
  protobuf_AddDesc_h2mod_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "h2mod.proto");
  GOOGLE_CHECK(file != NULL);
  H2ModPacket_descriptor_ = file->message_type(0);
  static const int H2ModPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, h2_set_player_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, set_grenade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, map_info_),
  };
  H2ModPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      H2ModPacket_descriptor_,
      H2ModPacket::default_instance_,
      H2ModPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(H2ModPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(H2ModPacket));
  H2ModPacket_Type_descriptor_ = H2ModPacket_descriptor_->enum_type(0);
  h2mod_set_grenade_descriptor_ = file->message_type(1);
  static const int h2mod_set_grenade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, pindex_),
  };
  h2mod_set_grenade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_set_grenade_descriptor_,
      h2mod_set_grenade::default_instance_,
      h2mod_set_grenade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_grenade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_set_grenade));
  h2mod_set_team_descriptor_ = file->message_type(2);
  static const int h2mod_set_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, peerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, team_),
  };
  h2mod_set_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_set_team_descriptor_,
      h2mod_set_team::default_instance_,
      h2mod_set_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_set_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_set_team));
  h2mod_map_info_descriptor_ = file->message_type(3);
  static const int h2mod_map_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_map_info, mapfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_map_info, mapsize_),
  };
  h2mod_map_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      h2mod_map_info_descriptor_,
      h2mod_map_info::default_instance_,
      h2mod_map_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_map_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(h2mod_map_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(h2mod_map_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_h2mod_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    H2ModPacket_descriptor_, &H2ModPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_set_grenade_descriptor_, &h2mod_set_grenade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_set_team_descriptor_, &h2mod_set_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    h2mod_map_info_descriptor_, &h2mod_map_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_h2mod_2eproto() {
  delete H2ModPacket::default_instance_;
  delete H2ModPacket_reflection_;
  delete h2mod_set_grenade::default_instance_;
  delete h2mod_set_grenade_reflection_;
  delete h2mod_set_team::default_instance_;
  delete h2mod_set_team_reflection_;
  delete h2mod_map_info::default_instance_;
  delete h2mod_map_info_reflection_;
}

void protobuf_AddDesc_h2mod_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013h2mod.proto\"\361\001\n\013H2ModPacket\022\037\n\004type\030\001 "
    "\002(\0162\021.H2ModPacket.Type\022+\n\022h2_set_player_"
    "team\030\002 \001(\0132\017.h2mod_set_team\022\'\n\013set_grena"
    "de\030\003 \001(\0132\022.h2mod_set_grenade\022!\n\010map_info"
    "\030\004 \001(\0132\017.h2mod_map_info\"H\n\004Type\022\023\n\017set_p"
    "layer_team\020\002\022\025\n\021set_unit_grenades\020\003\022\024\n\020m"
    "ap_info_request\020\004\"@\n\021h2mod_set_grenade\022\014"
    "\n\004type\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\016\n\006pIndex\030\003 "
    "\002(\r\"1\n\016h2mod_set_team\022\021\n\tpeerIndex\030\001 \002(\r"
    "\022\014\n\004team\030\002 \002(\r\"6\n\016h2mod_map_info\022\023\n\013mapF"
    "ileName\030\001 \002(\t\022\017\n\007mapSize\030\002 \002(\r", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "h2mod.proto", &protobuf_RegisterTypes);
  H2ModPacket::default_instance_ = new H2ModPacket();
  h2mod_set_grenade::default_instance_ = new h2mod_set_grenade();
  h2mod_set_team::default_instance_ = new h2mod_set_team();
  h2mod_map_info::default_instance_ = new h2mod_map_info();
  H2ModPacket::default_instance_->InitAsDefaultInstance();
  h2mod_set_grenade::default_instance_->InitAsDefaultInstance();
  h2mod_set_team::default_instance_->InitAsDefaultInstance();
  h2mod_map_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_h2mod_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_h2mod_2eproto {
  StaticDescriptorInitializer_h2mod_2eproto() {
    protobuf_AddDesc_h2mod_2eproto();
  }
} static_descriptor_initializer_h2mod_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* H2ModPacket_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return H2ModPacket_Type_descriptor_;
}
bool H2ModPacket_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const H2ModPacket_Type H2ModPacket::set_player_team;
const H2ModPacket_Type H2ModPacket::set_unit_grenades;
const H2ModPacket_Type H2ModPacket::map_info_request;
const H2ModPacket_Type H2ModPacket::Type_MIN;
const H2ModPacket_Type H2ModPacket::Type_MAX;
const int H2ModPacket::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int H2ModPacket::kTypeFieldNumber;
const int H2ModPacket::kH2SetPlayerTeamFieldNumber;
const int H2ModPacket::kSetGrenadeFieldNumber;
const int H2ModPacket::kMapInfoFieldNumber;
#endif  // !_MSC_VER

H2ModPacket::H2ModPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:H2ModPacket)
}

void H2ModPacket::InitAsDefaultInstance() {
  h2_set_player_team_ = const_cast< ::h2mod_set_team*>(&::h2mod_set_team::default_instance());
  set_grenade_ = const_cast< ::h2mod_set_grenade*>(&::h2mod_set_grenade::default_instance());
  map_info_ = const_cast< ::h2mod_map_info*>(&::h2mod_map_info::default_instance());
}

H2ModPacket::H2ModPacket(const H2ModPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:H2ModPacket)
}

void H2ModPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  h2_set_player_team_ = NULL;
  set_grenade_ = NULL;
  map_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

H2ModPacket::~H2ModPacket() {
  // @@protoc_insertion_point(destructor:H2ModPacket)
  SharedDtor();
}

void H2ModPacket::SharedDtor() {
  if (this != default_instance_) {
    delete h2_set_player_team_;
    delete set_grenade_;
    delete map_info_;
  }
}

void H2ModPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* H2ModPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return H2ModPacket_descriptor_;
}

const H2ModPacket& H2ModPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

H2ModPacket* H2ModPacket::default_instance_ = NULL;

H2ModPacket* H2ModPacket::New() const {
  return new H2ModPacket;
}

void H2ModPacket::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 2;
    if (has_h2_set_player_team()) {
      if (h2_set_player_team_ != NULL) h2_set_player_team_->::h2mod_set_team::Clear();
    }
    if (has_set_grenade()) {
      if (set_grenade_ != NULL) set_grenade_->::h2mod_set_grenade::Clear();
    }
    if (has_map_info()) {
      if (map_info_ != NULL) map_info_->::h2mod_map_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool H2ModPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:H2ModPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .H2ModPacket.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::H2ModPacket_Type_IsValid(value)) {
            set_type(static_cast< ::H2ModPacket_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_h2_set_player_team;
        break;
      }

      // optional .h2mod_set_team h2_set_player_team = 2;
      case 2: {
        if (tag == 18) {
         parse_h2_set_player_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h2_set_player_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_grenade;
        break;
      }

      // optional .h2mod_set_grenade set_grenade = 3;
      case 3: {
        if (tag == 26) {
         parse_set_grenade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_grenade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map_info;
        break;
      }

      // optional .h2mod_map_info map_info = 4;
      case 4: {
        if (tag == 34) {
         parse_map_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:H2ModPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:H2ModPacket)
  return false;
#undef DO_
}

void H2ModPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:H2ModPacket)
  // required .H2ModPacket.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .h2mod_set_team h2_set_player_team = 2;
  if (has_h2_set_player_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->h2_set_player_team(), output);
  }

  // optional .h2mod_set_grenade set_grenade = 3;
  if (has_set_grenade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->set_grenade(), output);
  }

  // optional .h2mod_map_info map_info = 4;
  if (has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->map_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:H2ModPacket)
}

::google::protobuf::uint8* H2ModPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:H2ModPacket)
  // required .H2ModPacket.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .h2mod_set_team h2_set_player_team = 2;
  if (has_h2_set_player_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->h2_set_player_team(), target);
  }

  // optional .h2mod_set_grenade set_grenade = 3;
  if (has_set_grenade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->set_grenade(), target);
  }

  // optional .h2mod_map_info map_info = 4;
  if (has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->map_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:H2ModPacket)
  return target;
}

int H2ModPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .H2ModPacket.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .h2mod_set_team h2_set_player_team = 2;
    if (has_h2_set_player_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h2_set_player_team());
    }

    // optional .h2mod_set_grenade set_grenade = 3;
    if (has_set_grenade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_grenade());
    }

    // optional .h2mod_map_info map_info = 4;
    if (has_map_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void H2ModPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const H2ModPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const H2ModPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void H2ModPacket::MergeFrom(const H2ModPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_h2_set_player_team()) {
      mutable_h2_set_player_team()->::h2mod_set_team::MergeFrom(from.h2_set_player_team());
    }
    if (from.has_set_grenade()) {
      mutable_set_grenade()->::h2mod_set_grenade::MergeFrom(from.set_grenade());
    }
    if (from.has_map_info()) {
      mutable_map_info()->::h2mod_map_info::MergeFrom(from.map_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void H2ModPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H2ModPacket::CopyFrom(const H2ModPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H2ModPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_h2_set_player_team()) {
    if (!this->h2_set_player_team().IsInitialized()) return false;
  }
  if (has_set_grenade()) {
    if (!this->set_grenade().IsInitialized()) return false;
  }
  if (has_map_info()) {
    if (!this->map_info().IsInitialized()) return false;
  }
  return true;
}

void H2ModPacket::Swap(H2ModPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(h2_set_player_team_, other->h2_set_player_team_);
    std::swap(set_grenade_, other->set_grenade_);
    std::swap(map_info_, other->map_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata H2ModPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = H2ModPacket_descriptor_;
  metadata.reflection = H2ModPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_set_grenade::kTypeFieldNumber;
const int h2mod_set_grenade::kCountFieldNumber;
const int h2mod_set_grenade::kPIndexFieldNumber;
#endif  // !_MSC_VER

h2mod_set_grenade::h2mod_set_grenade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_set_grenade)
}

void h2mod_set_grenade::InitAsDefaultInstance() {
}

h2mod_set_grenade::h2mod_set_grenade(const h2mod_set_grenade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_set_grenade)
}

void h2mod_set_grenade::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  pindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_set_grenade::~h2mod_set_grenade() {
  // @@protoc_insertion_point(destructor:h2mod_set_grenade)
  SharedDtor();
}

void h2mod_set_grenade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void h2mod_set_grenade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_set_grenade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_set_grenade_descriptor_;
}

const h2mod_set_grenade& h2mod_set_grenade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_set_grenade* h2mod_set_grenade::default_instance_ = NULL;

h2mod_set_grenade* h2mod_set_grenade::New() const {
  return new h2mod_set_grenade;
}

void h2mod_set_grenade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<h2mod_set_grenade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, pindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_set_grenade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_set_grenade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pIndex;
        break;
      }

      // required uint32 pIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_pIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pindex_)));
          set_has_pindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_set_grenade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_set_grenade)
  return false;
#undef DO_
}

void h2mod_set_grenade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_set_grenade)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 pIndex = 3;
  if (has_pindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_set_grenade)
}

::google::protobuf::uint8* h2mod_set_grenade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_set_grenade)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 pIndex = 3;
  if (has_pindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_set_grenade)
  return target;
}

int h2mod_set_grenade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 pIndex = 3;
    if (has_pindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_set_grenade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_set_grenade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_set_grenade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_set_grenade::MergeFrom(const h2mod_set_grenade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pindex()) {
      set_pindex(from.pindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_set_grenade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_set_grenade::CopyFrom(const h2mod_set_grenade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_set_grenade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void h2mod_set_grenade::Swap(h2mod_set_grenade* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(pindex_, other->pindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_set_grenade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_set_grenade_descriptor_;
  metadata.reflection = h2mod_set_grenade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_set_team::kPeerIndexFieldNumber;
const int h2mod_set_team::kTeamFieldNumber;
#endif  // !_MSC_VER

h2mod_set_team::h2mod_set_team()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_set_team)
}

void h2mod_set_team::InitAsDefaultInstance() {
}

h2mod_set_team::h2mod_set_team(const h2mod_set_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_set_team)
}

void h2mod_set_team::SharedCtor() {
  _cached_size_ = 0;
  peerindex_ = 0u;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_set_team::~h2mod_set_team() {
  // @@protoc_insertion_point(destructor:h2mod_set_team)
  SharedDtor();
}

void h2mod_set_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void h2mod_set_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_set_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_set_team_descriptor_;
}

const h2mod_set_team& h2mod_set_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_set_team* h2mod_set_team::default_instance_ = NULL;

h2mod_set_team* h2mod_set_team::New() const {
  return new h2mod_set_team;
}

void h2mod_set_team::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<h2mod_set_team*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(peerindex_, team_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_set_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_set_team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 peerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerindex_)));
          set_has_peerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // required uint32 team = 2;
      case 2: {
        if (tag == 16) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_set_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_set_team)
  return false;
#undef DO_
}

void h2mod_set_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_set_team)
  // required uint32 peerIndex = 1;
  if (has_peerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->peerindex(), output);
  }

  // required uint32 team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_set_team)
}

::google::protobuf::uint8* h2mod_set_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_set_team)
  // required uint32 peerIndex = 1;
  if (has_peerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->peerindex(), target);
  }

  // required uint32 team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_set_team)
  return target;
}

int h2mod_set_team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 peerIndex = 1;
    if (has_peerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peerindex());
    }

    // required uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_set_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_set_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_set_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_set_team::MergeFrom(const h2mod_set_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peerindex()) {
      set_peerindex(from.peerindex());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_set_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_set_team::CopyFrom(const h2mod_set_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_set_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void h2mod_set_team::Swap(h2mod_set_team* other) {
  if (other != this) {
    std::swap(peerindex_, other->peerindex_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_set_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_set_team_descriptor_;
  metadata.reflection = h2mod_set_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int h2mod_map_info::kMapFileNameFieldNumber;
const int h2mod_map_info::kMapSizeFieldNumber;
#endif  // !_MSC_VER

h2mod_map_info::h2mod_map_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:h2mod_map_info)
}

void h2mod_map_info::InitAsDefaultInstance() {
}

h2mod_map_info::h2mod_map_info(const h2mod_map_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:h2mod_map_info)
}

void h2mod_map_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

h2mod_map_info::~h2mod_map_info() {
  // @@protoc_insertion_point(destructor:h2mod_map_info)
  SharedDtor();
}

void h2mod_map_info::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
  }
}

void h2mod_map_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* h2mod_map_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return h2mod_map_info_descriptor_;
}

const h2mod_map_info& h2mod_map_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_h2mod_2eproto();
  return *default_instance_;
}

h2mod_map_info* h2mod_map_info::default_instance_ = NULL;

h2mod_map_info* h2mod_map_info::New() const {
  return new h2mod_map_info;
}

void h2mod_map_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
    mapsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool h2mod_map_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:h2mod_map_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapFileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapSize;
        break;
      }

      // required uint32 mapSize = 2;
      case 2: {
        if (tag == 16) {
         parse_mapSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapsize_)));
          set_has_mapsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:h2mod_map_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:h2mod_map_info)
  return false;
#undef DO_
}

void h2mod_map_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:h2mod_map_info)
  // required string mapFileName = 1;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapfilename(), output);
  }

  // required uint32 mapSize = 2;
  if (has_mapsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:h2mod_map_info)
}

::google::protobuf::uint8* h2mod_map_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:h2mod_map_info)
  // required string mapFileName = 1;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapfilename(), target);
  }

  // required uint32 mapSize = 2;
  if (has_mapsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:h2mod_map_info)
  return target;
}

int h2mod_map_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapFileName = 1;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

    // required uint32 mapSize = 2;
    if (has_mapsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void h2mod_map_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const h2mod_map_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const h2mod_map_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void h2mod_map_info::MergeFrom(const h2mod_map_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
    if (from.has_mapsize()) {
      set_mapsize(from.mapsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void h2mod_map_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void h2mod_map_info::CopyFrom(const h2mod_map_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool h2mod_map_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void h2mod_map_info::Swap(h2mod_map_info* other) {
  if (other != this) {
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(mapsize_, other->mapsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata h2mod_map_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = h2mod_map_info_descriptor_;
  metadata.reflection = h2mod_map_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
